# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
# our build is going to run inside of Docker Container
version: 2
jobs:
  build:
    # job for Docker
    docker:
      # specify the version you desire here
      # a build is gonna run inside of a Docker container and we are going to
      # utilize the Circle CI Open JDK 8 (so this is setting up the JDK 8)
      # that is built into the Circle CI build image, it has all the build tools
      # (open JDK8, Maven, Gradle,...) and everything we need for Java Build
      # this is controlling the base image that Cirle CI is going to use to do our CI builds
      # so Circle CI is going to check things out, run them inside of a Docker Container with specific version of Java
      # that is the image for Java 8
      # - image: circleci/openjdk:8-jdk

      # that is the image for Java 11
      - image: circleci/openjdk:11-browsers-legacy

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    # sets up the working directory
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # install - tells Maven to install to the local directory (into the local .m2)
      # the install step will actually tell to go ahead install all the artifacts into the local Maven directory (.m2)
      # install the modules into the local (but without tests).
      - run: mvn install -DskipTests

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests! (all tests - unit tests and integration tests)
      - run: mvn integration-test